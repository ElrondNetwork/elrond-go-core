// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: slash.proto

package slash

import (
	fmt "fmt"
	block "github.com/ElrondNetwork/elrond-go-core/data/block"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SlashingType int32

const (
	None             SlashingType = 0
	MultipleProposal SlashingType = 1
	MultipleSigning  SlashingType = 2
)

var SlashingType_name = map[int32]string{
	0: "None",
	1: "MultipleProposal",
	2: "MultipleSigning",
}

var SlashingType_value = map[string]int32{
	"None":             0,
	"MultipleProposal": 1,
	"MultipleSigning":  2,
}

func (SlashingType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7c4604f407d65f7b, []int{0}
}

type ThreatLevel int32

const (
	Low    ThreatLevel = 0
	Medium ThreatLevel = 1
	High   ThreatLevel = 2
)

var ThreatLevel_name = map[int32]string{
	0: "Low",
	1: "Medium",
	2: "High",
}

var ThreatLevel_value = map[string]int32{
	"Low":    0,
	"Medium": 1,
	"High":   2,
}

func (ThreatLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7c4604f407d65f7b, []int{1}
}

type Headers struct {
	Headers []*block.Header `protobuf:"bytes,1,rep,name=Headers,proto3" json:"Headers,omitempty"`
}

func (m *Headers) Reset()      { *m = Headers{} }
func (*Headers) ProtoMessage() {}
func (*Headers) Descriptor() ([]byte, []int) {
	return fileDescriptor_7c4604f407d65f7b, []int{0}
}
func (m *Headers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Headers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *Headers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Headers.Merge(m, src)
}
func (m *Headers) XXX_Size() int {
	return m.Size()
}
func (m *Headers) XXX_DiscardUnknown() {
	xxx_messageInfo_Headers.DiscardUnknown(m)
}

var xxx_messageInfo_Headers proto.InternalMessageInfo

func (m *Headers) GetHeaders() []*block.Header {
	if m != nil {
		return m.Headers
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.SlashingType", SlashingType_name, SlashingType_value)
	proto.RegisterEnum("proto.ThreatLevel", ThreatLevel_name, ThreatLevel_value)
	proto.RegisterType((*Headers)(nil), "proto.Headers")
}

func init() { proto.RegisterFile("slash.proto", fileDescriptor_7c4604f407d65f7b) }

var fileDescriptor_7c4604f407d65f7b = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x50, 0xb1, 0x4e, 0x2a, 0x41,
	0x14, 0x9d, 0x81, 0x07, 0xbc, 0x0c, 0xef, 0xc5, 0xcd, 0x68, 0x61, 0x28, 0x6e, 0x8c, 0x8d, 0x86,
	0x08, 0x9b, 0x60, 0xaf, 0x89, 0xc6, 0x84, 0x02, 0x88, 0x11, 0x2a, 0xbb, 0x5d, 0x76, 0x9c, 0x9d,
	0x30, 0xec, 0xdd, 0xcc, 0xee, 0x4a, 0xec, 0xfc, 0x04, 0x3f, 0xc3, 0x4f, 0xb1, 0xa4, 0xa4, 0x94,
	0xa1, 0xb1, 0xe4, 0x13, 0x0c, 0xb3, 0xc1, 0xd8, 0xcc, 0x9c, 0x73, 0xee, 0x39, 0x37, 0xf7, 0x5e,
	0xd6, 0xcc, 0x74, 0x90, 0xc5, 0xdd, 0xd4, 0x60, 0x8e, 0xbc, 0xe6, 0xbe, 0x56, 0x47, 0xaa, 0x3c,
	0x2e, 0xc2, 0xee, 0x14, 0xe7, 0xbe, 0x44, 0x89, 0xbe, 0x93, 0xc3, 0xe2, 0xc9, 0x31, 0x47, 0x1c,
	0x2a, 0x53, 0xad, 0xab, 0x5f, 0xf6, 0x3b, 0x6d, 0x30, 0x89, 0x46, 0x22, 0x5f, 0xa0, 0x99, 0xf9,
	0xc2, 0xb1, 0x8e, 0xc4, 0xce, 0x14, 0x8d, 0xf0, 0xa3, 0x20, 0x0f, 0xfc, 0x50, 0xe3, 0x74, 0x56,
	0xbe, 0x65, 0xfe, 0xb4, 0xc7, 0x1a, 0x7d, 0x11, 0x44, 0xc2, 0x64, 0xfc, 0xec, 0x07, 0x1e, 0xd3,
	0x93, 0xea, 0x79, 0xb3, 0xf7, 0xbf, 0xf4, 0x74, 0x4b, 0xf5, 0x61, 0x5f, 0x6d, 0xdf, 0xb2, 0x7f,
	0xe3, 0xdd, 0xe0, 0x2a, 0x91, 0x93, 0x97, 0x54, 0xf0, 0xbf, 0xec, 0xcf, 0x08, 0x13, 0xe1, 0x11,
	0x7e, 0xc4, 0xbc, 0x61, 0xa1, 0x73, 0x95, 0x6a, 0x71, 0x6f, 0x30, 0xc5, 0x2c, 0xd0, 0x1e, 0xe5,
	0x87, 0xec, 0x60, 0xaf, 0x8e, 0x95, 0x4c, 0x54, 0x22, 0xbd, 0x4a, 0xfb, 0x82, 0x35, 0x27, 0xb1,
	0x11, 0x41, 0x3e, 0x10, 0xcf, 0x42, 0xf3, 0x06, 0xab, 0x0e, 0x70, 0xe1, 0x11, 0xce, 0x58, 0x7d,
	0x28, 0x22, 0x55, 0xcc, 0x3d, 0xba, 0x6b, 0xdc, 0x57, 0x32, 0xf6, 0x2a, 0x37, 0xd7, 0xcb, 0x35,
	0x90, 0xd5, 0x1a, 0xc8, 0x76, 0x0d, 0xf4, 0xd5, 0x02, 0x7d, 0xb7, 0x40, 0x3f, 0x2c, 0xd0, 0xa5,
	0x05, 0xba, 0xb2, 0x40, 0x3f, 0x2d, 0xd0, 0x2f, 0x0b, 0x64, 0x6b, 0x81, 0xbe, 0x6d, 0x80, 0x2c,
	0x37, 0x40, 0x56, 0x1b, 0x20, 0x8f, 0x35, 0x77, 0xe3, 0xb0, 0xee, 0x56, 0xb9, 0xfc, 0x0e, 0x00,
	0x00, 0xff, 0xff, 0xd3, 0x2a, 0xd5, 0xbf, 0x73, 0x01, 0x00, 0x00,
}

func (x SlashingType) String() string {
	s, ok := SlashingType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ThreatLevel) String() string {
	s, ok := ThreatLevel_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Headers) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Headers)
	if !ok {
		that2, ok := that.(Headers)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Headers) != len(that1.Headers) {
		return false
	}
	for i := range this.Headers {
		if !this.Headers[i].Equal(that1.Headers[i]) {
			return false
		}
	}
	return true
}
func (this *Headers) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&slash.Headers{")
	if this.Headers != nil {
		s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringSlash(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Headers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Headers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Headers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for iNdEx := len(m.Headers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Headers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSlash(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSlash(dAtA []byte, offset int, v uint64) int {
	offset -= sovSlash(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Headers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Headers) > 0 {
		for _, e := range m.Headers {
			l = e.Size()
			n += 1 + l + sovSlash(uint64(l))
		}
	}
	return n
}

func sovSlash(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSlash(x uint64) (n int) {
	return sovSlash(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Headers) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForHeaders := "[]*Header{"
	for _, f := range this.Headers {
		repeatedStringForHeaders += strings.Replace(fmt.Sprintf("%v", f), "Header", "block.Header", 1) + ","
	}
	repeatedStringForHeaders += "}"
	s := strings.Join([]string{`&Headers{`,
		`Headers:` + repeatedStringForHeaders + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringSlash(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Headers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSlash
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Headers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Headers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSlash
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSlash
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSlash
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = append(m.Headers, &block.Header{})
			if err := m.Headers[len(m.Headers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSlash(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSlash
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSlash
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSlash(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSlash
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSlash
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSlash
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSlash
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSlash
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSlash        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSlash          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSlash = fmt.Errorf("proto: unexpected end of group")
)
