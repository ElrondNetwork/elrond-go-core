// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multipleHeaderSigningProof.proto

package slash

import (
	bytes "bytes"
	fmt "fmt"
	block "github.com/ElrondNetwork/elrond-go-core/data/block"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultipleHeaderSigningProof struct {
	Type        SlashingType                    `protobuf:"varint,1,opt,name=Type,proto3,enum=proto.SlashingType" json:"Type,omitempty"`
	PubKeys     [][]byte                        `protobuf:"bytes,2,rep,name=PubKeys,proto3" json:"PubKeys,omitempty"`
	Levels      map[string]ThreatLevel          `protobuf:"bytes,3,rep,name=Levels,proto3" json:"Levels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=proto.ThreatLevel"`
	HeadersInfo map[string]block.HeaderInfoList `protobuf:"bytes,4,rep,name=HeadersInfo,proto3" json:"HeadersInfo" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *MultipleHeaderSigningProof) Reset()      { *m = MultipleHeaderSigningProof{} }
func (*MultipleHeaderSigningProof) ProtoMessage() {}
func (*MultipleHeaderSigningProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_f61c9968ee2015ff, []int{0}
}
func (m *MultipleHeaderSigningProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultipleHeaderSigningProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MultipleHeaderSigningProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleHeaderSigningProof.Merge(m, src)
}
func (m *MultipleHeaderSigningProof) XXX_Size() int {
	return m.Size()
}
func (m *MultipleHeaderSigningProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleHeaderSigningProof.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleHeaderSigningProof proto.InternalMessageInfo

func (m *MultipleHeaderSigningProof) GetType() SlashingType {
	if m != nil {
		return m.Type
	}
	return None
}

func (m *MultipleHeaderSigningProof) GetPubKeys() [][]byte {
	if m != nil {
		return m.PubKeys
	}
	return nil
}

func (m *MultipleHeaderSigningProof) GetLevels() map[string]ThreatLevel {
	if m != nil {
		return m.Levels
	}
	return nil
}

func (m *MultipleHeaderSigningProof) GetHeadersInfo() map[string]block.HeaderInfoList {
	if m != nil {
		return m.HeadersInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*MultipleHeaderSigningProof)(nil), "proto.MultipleHeaderSigningProof")
	proto.RegisterMapType((map[string]block.HeaderInfoList)(nil), "proto.MultipleHeaderSigningProof.HeadersInfoEntry")
	proto.RegisterMapType((map[string]ThreatLevel)(nil), "proto.MultipleHeaderSigningProof.LevelsEntry")
}

func init() { proto.RegisterFile("multipleHeaderSigningProof.proto", fileDescriptor_f61c9968ee2015ff) }

var fileDescriptor_f61c9968ee2015ff = []byte{
	// 409 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcf, 0xaa, 0xd3, 0x40,
	0x18, 0xc5, 0x33, 0x4d, 0x7b, 0xc5, 0x89, 0xc8, 0x65, 0x44, 0x08, 0x59, 0x8c, 0xc1, 0x8d, 0x01,
	0x49, 0x02, 0x71, 0x23, 0x6e, 0x84, 0x4a, 0xa1, 0x62, 0x2b, 0x25, 0xad, 0x9b, 0xee, 0x92, 0x76,
	0x9a, 0x84, 0xa6, 0x99, 0x32, 0x99, 0x54, 0xb2, 0xf3, 0x11, 0x7c, 0x8c, 0x3e, 0x4a, 0x97, 0x5d,
	0x76, 0x25, 0x76, 0xba, 0x71, 0xd9, 0x47, 0x90, 0x4c, 0xa2, 0x04, 0xb1, 0xdc, 0x55, 0xe6, 0xfb,
	0x72, 0xce, 0xef, 0x9c, 0xfc, 0x81, 0xe6, 0xa6, 0x48, 0x79, 0xb2, 0x4d, 0xc9, 0x90, 0x04, 0x4b,
	0xc2, 0xa6, 0x49, 0x94, 0x25, 0x59, 0x34, 0x61, 0x94, 0xae, 0x9c, 0x2d, 0xa3, 0x9c, 0xa2, 0x9e,
	0xbc, 0x18, 0x5a, 0x9e, 0x06, 0x79, 0x5c, 0xef, 0x0c, 0x3b, 0x4a, 0x78, 0x5c, 0x84, 0xce, 0x82,
	0x6e, 0xdc, 0x88, 0x46, 0xd4, 0x95, 0xeb, 0xb0, 0x58, 0xc9, 0x49, 0x0e, 0xf2, 0xd4, 0xc8, 0x3f,
	0xb4, 0xe4, 0x83, 0x94, 0xd1, 0x6c, 0xf9, 0x99, 0xf0, 0xaf, 0x94, 0xad, 0x5d, 0x22, 0x27, 0x3b,
	0xa2, 0xf6, 0x82, 0x32, 0xe2, 0x2e, 0x03, 0x1e, 0xb8, 0x61, 0x4a, 0x17, 0x6b, 0x37, 0x96, 0x7d,
	0x3e, 0x66, 0xab, 0x06, 0xf2, 0x72, 0xaf, 0x42, 0x63, 0x7c, 0xb3, 0x2c, 0x7a, 0x05, 0xbb, 0xb3,
	0x72, 0x4b, 0x74, 0x60, 0x02, 0xeb, 0xa9, 0xf7, 0xac, 0x36, 0x39, 0xd3, 0xaa, 0x74, 0x92, 0x45,
	0xd5, 0x2d, 0x5f, 0x0a, 0x90, 0x0e, 0x1f, 0x4d, 0x8a, 0xf0, 0x13, 0x29, 0x73, 0xbd, 0x63, 0xaa,
	0xd6, 0x13, 0xff, 0xcf, 0x88, 0x06, 0xf0, 0x6e, 0x44, 0x76, 0x24, 0xcd, 0x75, 0xd5, 0x54, 0x2d,
	0xcd, 0xb3, 0x1b, 0xc8, 0xed, 0x54, 0xa7, 0xd6, 0x0f, 0x32, 0xce, 0x4a, 0xbf, 0x31, 0xa3, 0x39,
	0xd4, 0x6a, 0x65, 0x5e, 0xb5, 0xd7, 0xbb, 0x92, 0xe5, 0x3d, 0xcc, 0x6a, 0x99, 0x24, 0xb0, 0xdf,
	0x3d, 0xfc, 0x78, 0xa1, 0xf8, 0x6d, 0x98, 0x31, 0x86, 0x5a, 0x2b, 0x12, 0xdd, 0x43, 0x75, 0x4d,
	0x4a, 0xf9, 0xcc, 0x8f, 0xfd, 0xea, 0x88, 0x2c, 0xd8, 0xdb, 0x05, 0x69, 0x41, 0xf4, 0x8e, 0x7c,
	0x0f, 0xa8, 0x89, 0x9d, 0xc5, 0x8c, 0x04, 0x5c, 0x5a, 0xfd, 0x5a, 0xf0, 0xae, 0xf3, 0x16, 0x18,
	0x5f, 0xe0, 0xfd, 0xbf, 0xa9, 0xff, 0x61, 0xbe, 0x6e, 0x33, 0x35, 0xef, 0x79, 0xc3, 0x1c, 0xfe,
	0xfd, 0x42, 0xa3, 0x24, 0xe7, 0x2d, 0x6c, 0xff, 0xfd, 0xf1, 0x8c, 0x95, 0xd3, 0x19, 0x2b, 0xd7,
	0x33, 0x06, 0xdf, 0x04, 0x06, 0x7b, 0x81, 0xc1, 0x41, 0x60, 0x70, 0x14, 0x18, 0x9c, 0x04, 0x06,
	0x3f, 0x05, 0x06, 0xbf, 0x04, 0x56, 0xae, 0x02, 0x83, 0xef, 0x17, 0xac, 0x1c, 0x2f, 0x58, 0x39,
	0x5d, 0xb0, 0x32, 0xef, 0xc9, 0xbf, 0x2c, 0xbc, 0x93, 0x09, 0x6f, 0x7e, 0x07, 0x00, 0x00, 0xff,
	0xff, 0x20, 0xc8, 0x97, 0x39, 0x9e, 0x02, 0x00, 0x00,
}

func (this *MultipleHeaderSigningProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultipleHeaderSigningProof)
	if !ok {
		that2, ok := that.(MultipleHeaderSigningProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if len(this.PubKeys) != len(that1.PubKeys) {
		return false
	}
	for i := range this.PubKeys {
		if !bytes.Equal(this.PubKeys[i], that1.PubKeys[i]) {
			return false
		}
	}
	if len(this.Levels) != len(that1.Levels) {
		return false
	}
	for i := range this.Levels {
		if this.Levels[i] != that1.Levels[i] {
			return false
		}
	}
	if len(this.HeadersInfo) != len(that1.HeadersInfo) {
		return false
	}
	for i := range this.HeadersInfo {
		a := this.HeadersInfo[i]
		b := that1.HeadersInfo[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	return true
}
func (this *MultipleHeaderSigningProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&slash.MultipleHeaderSigningProof{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "PubKeys: "+fmt.Sprintf("%#v", this.PubKeys)+",\n")
	keysForLevels := make([]string, 0, len(this.Levels))
	for k, _ := range this.Levels {
		keysForLevels = append(keysForLevels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLevels)
	mapStringForLevels := "map[string]ThreatLevel{"
	for _, k := range keysForLevels {
		mapStringForLevels += fmt.Sprintf("%#v: %#v,", k, this.Levels[k])
	}
	mapStringForLevels += "}"
	if this.Levels != nil {
		s = append(s, "Levels: "+mapStringForLevels+",\n")
	}
	keysForHeadersInfo := make([]string, 0, len(this.HeadersInfo))
	for k, _ := range this.HeadersInfo {
		keysForHeadersInfo = append(keysForHeadersInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeadersInfo)
	mapStringForHeadersInfo := "map[string]block.HeaderInfoList{"
	for _, k := range keysForHeadersInfo {
		mapStringForHeadersInfo += fmt.Sprintf("%#v: %#v,", k, this.HeadersInfo[k])
	}
	mapStringForHeadersInfo += "}"
	if this.HeadersInfo != nil {
		s = append(s, "HeadersInfo: "+mapStringForHeadersInfo+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMultipleHeaderSigningProof(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MultipleHeaderSigningProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipleHeaderSigningProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultipleHeaderSigningProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HeadersInfo) > 0 {
		keysForHeadersInfo := make([]string, 0, len(m.HeadersInfo))
		for k := range m.HeadersInfo {
			keysForHeadersInfo = append(keysForHeadersInfo, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForHeadersInfo)
		for iNdEx := len(keysForHeadersInfo) - 1; iNdEx >= 0; iNdEx-- {
			v := m.HeadersInfo[string(keysForHeadersInfo[iNdEx])]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(keysForHeadersInfo[iNdEx])
			copy(dAtA[i:], keysForHeadersInfo[iNdEx])
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(len(keysForHeadersInfo[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Levels) > 0 {
		keysForLevels := make([]string, 0, len(m.Levels))
		for k := range m.Levels {
			keysForLevels = append(keysForLevels, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLevels)
		for iNdEx := len(keysForLevels) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Levels[string(keysForLevels[iNdEx])]
			baseI := i
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(keysForLevels[iNdEx])
			copy(dAtA[i:], keysForLevels[iNdEx])
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(len(keysForLevels[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PubKeys) > 0 {
		for iNdEx := len(m.PubKeys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PubKeys[iNdEx])
			copy(dAtA[i:], m.PubKeys[iNdEx])
			i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(len(m.PubKeys[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Type != 0 {
		i = encodeVarintMultipleHeaderSigningProof(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultipleHeaderSigningProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultipleHeaderSigningProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultipleHeaderSigningProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMultipleHeaderSigningProof(uint64(m.Type))
	}
	if len(m.PubKeys) > 0 {
		for _, b := range m.PubKeys {
			l = len(b)
			n += 1 + l + sovMultipleHeaderSigningProof(uint64(l))
		}
	}
	if len(m.Levels) > 0 {
		for k, v := range m.Levels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovMultipleHeaderSigningProof(uint64(len(k))) + 1 + sovMultipleHeaderSigningProof(uint64(v))
			n += mapEntrySize + 1 + sovMultipleHeaderSigningProof(uint64(mapEntrySize))
		}
	}
	if len(m.HeadersInfo) > 0 {
		for k, v := range m.HeadersInfo {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovMultipleHeaderSigningProof(uint64(len(k))) + 1 + l + sovMultipleHeaderSigningProof(uint64(l))
			n += mapEntrySize + 1 + sovMultipleHeaderSigningProof(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMultipleHeaderSigningProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultipleHeaderSigningProof(x uint64) (n int) {
	return sovMultipleHeaderSigningProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MultipleHeaderSigningProof) String() string {
	if this == nil {
		return "nil"
	}
	keysForLevels := make([]string, 0, len(this.Levels))
	for k, _ := range this.Levels {
		keysForLevels = append(keysForLevels, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLevels)
	mapStringForLevels := "map[string]ThreatLevel{"
	for _, k := range keysForLevels {
		mapStringForLevels += fmt.Sprintf("%v: %v,", k, this.Levels[k])
	}
	mapStringForLevels += "}"
	keysForHeadersInfo := make([]string, 0, len(this.HeadersInfo))
	for k, _ := range this.HeadersInfo {
		keysForHeadersInfo = append(keysForHeadersInfo, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForHeadersInfo)
	mapStringForHeadersInfo := "map[string]block.HeaderInfoList{"
	for _, k := range keysForHeadersInfo {
		mapStringForHeadersInfo += fmt.Sprintf("%v: %v,", k, this.HeadersInfo[k])
	}
	mapStringForHeadersInfo += "}"
	s := strings.Join([]string{`&MultipleHeaderSigningProof{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`PubKeys:` + fmt.Sprintf("%v", this.PubKeys) + `,`,
		`Levels:` + mapStringForLevels + `,`,
		`HeadersInfo:` + mapStringForHeadersInfo + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMultipleHeaderSigningProof(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MultipleHeaderSigningProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultipleHeaderSigningProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipleHeaderSigningProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipleHeaderSigningProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= SlashingType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKeys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKeys = append(m.PubKeys, make([]byte, postIndex-iNdEx))
			copy(m.PubKeys[len(m.PubKeys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Levels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Levels == nil {
				m.Levels = make(map[string]ThreatLevel)
			}
			var mapkey string
			var mapvalue ThreatLevel
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMultipleHeaderSigningProof
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMultipleHeaderSigningProof
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMultipleHeaderSigningProof
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= ThreatLevel(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMultipleHeaderSigningProof(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Levels[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadersInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.HeadersInfo == nil {
				m.HeadersInfo = make(map[string]block.HeaderInfoList)
			}
			var mapkey string
			mapvalue := &block.HeaderInfoList{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMultipleHeaderSigningProof
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMultipleHeaderSigningProof
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMultipleHeaderSigningProof
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &block.HeaderInfoList{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMultipleHeaderSigningProof(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMultipleHeaderSigningProof
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.HeadersInfo[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultipleHeaderSigningProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMultipleHeaderSigningProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultipleHeaderSigningProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultipleHeaderSigningProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultipleHeaderSigningProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultipleHeaderSigningProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultipleHeaderSigningProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultipleHeaderSigningProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultipleHeaderSigningProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultipleHeaderSigningProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultipleHeaderSigningProof = fmt.Errorf("proto: unexpected end of group")
)
