// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multipleHeaderProposalProof.proto

package slash

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MultipleHeaderProposalProof struct {
	Level   ThreatLevel `protobuf:"varint,1,opt,name=Level,proto3,enum=proto.ThreatLevel" json:"Level,omitempty"`
	Headers Headers     `protobuf:"bytes,2,opt,name=Headers,proto3" json:"Headers"`
}

func (m *MultipleHeaderProposalProof) Reset()      { *m = MultipleHeaderProposalProof{} }
func (*MultipleHeaderProposalProof) ProtoMessage() {}
func (*MultipleHeaderProposalProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_afe79f980fc6faed, []int{0}
}
func (m *MultipleHeaderProposalProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultipleHeaderProposalProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *MultipleHeaderProposalProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultipleHeaderProposalProof.Merge(m, src)
}
func (m *MultipleHeaderProposalProof) XXX_Size() int {
	return m.Size()
}
func (m *MultipleHeaderProposalProof) XXX_DiscardUnknown() {
	xxx_messageInfo_MultipleHeaderProposalProof.DiscardUnknown(m)
}

var xxx_messageInfo_MultipleHeaderProposalProof proto.InternalMessageInfo

func (m *MultipleHeaderProposalProof) GetLevel() ThreatLevel {
	if m != nil {
		return m.Level
	}
	return Low
}

func (m *MultipleHeaderProposalProof) GetHeaders() Headers {
	if m != nil {
		return m.Headers
	}
	return Headers{}
}

func init() {
	proto.RegisterType((*MultipleHeaderProposalProof)(nil), "proto.MultipleHeaderProposalProof")
}

func init() { proto.RegisterFile("multipleHeaderProposalProof.proto", fileDescriptor_afe79f980fc6faed) }

var fileDescriptor_afe79f980fc6faed = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcc, 0x2d, 0xcd, 0x29,
	0xc9, 0x2c, 0xc8, 0x49, 0xf5, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0x0a, 0x28, 0xca, 0x2f, 0xc8, 0x2f,
	0x4e, 0xcc, 0x09, 0x28, 0xca, 0xcf, 0x4f, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05,
	0x53, 0x52, 0xdc, 0xc5, 0x39, 0x89, 0xc5, 0x19, 0x10, 0x31, 0x29, 0xdd, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0x7d, 0xb0, 0x70, 0x52, 0x69,
	0x1a, 0x98, 0x07, 0xe6, 0x80, 0x59, 0x10, 0xe5, 0x4a, 0xe5, 0x5c, 0xd2, 0xbe, 0xb8, 0xed, 0x11,
	0xd2, 0xe0, 0x62, 0xf5, 0x49, 0x2d, 0x4b, 0xcd, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x33, 0x12,
	0x82, 0xe8, 0xd2, 0x0b, 0xc9, 0x28, 0x4a, 0x4d, 0x2c, 0x01, 0xcb, 0x04, 0x41, 0x14, 0x08, 0xe9,
	0x71, 0xb1, 0x43, 0x0c, 0x28, 0x96, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x36, 0xe2, 0x83, 0xaa, 0x85,
	0x8a, 0x3a, 0xb1, 0x9c, 0xb8, 0x27, 0xcf, 0x10, 0x04, 0x53, 0xe4, 0x64, 0x7f, 0xe1, 0xa1, 0x1c,
	0xc3, 0x8d, 0x87, 0x72, 0x0c, 0x1f, 0x1e, 0xca, 0x31, 0x36, 0x3c, 0x92, 0x63, 0x5c, 0xf1, 0x48,
	0x8e, 0xf1, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x6f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0xf1, 0xc5, 0x23, 0x39, 0x86, 0x0f, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8,
	0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x56, 0xb0, 0x77, 0x93, 0xd8, 0xc0, 0xc6,
	0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xd2, 0xe6, 0x0c, 0x3a, 0x28, 0x01, 0x00, 0x00,
}

func (this *MultipleHeaderProposalProof) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MultipleHeaderProposalProof)
	if !ok {
		that2, ok := that.(MultipleHeaderProposalProof)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Level != that1.Level {
		return false
	}
	if !this.Headers.Equal(&that1.Headers) {
		return false
	}
	return true
}
func (this *MultipleHeaderProposalProof) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&slash.MultipleHeaderProposalProof{")
	s = append(s, "Level: "+fmt.Sprintf("%#v", this.Level)+",\n")
	s = append(s, "Headers: "+strings.Replace(this.Headers.GoString(), `&`, ``, 1)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringMultipleHeaderProposalProof(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *MultipleHeaderProposalProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultipleHeaderProposalProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultipleHeaderProposalProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Headers.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMultipleHeaderProposalProof(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Level != 0 {
		i = encodeVarintMultipleHeaderProposalProof(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMultipleHeaderProposalProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovMultipleHeaderProposalProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultipleHeaderProposalProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovMultipleHeaderProposalProof(uint64(m.Level))
	}
	l = m.Headers.Size()
	n += 1 + l + sovMultipleHeaderProposalProof(uint64(l))
	return n
}

func sovMultipleHeaderProposalProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMultipleHeaderProposalProof(x uint64) (n int) {
	return sovMultipleHeaderProposalProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *MultipleHeaderProposalProof) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&MultipleHeaderProposalProof{`,
		`Level:` + fmt.Sprintf("%v", this.Level) + `,`,
		`Headers:` + strings.Replace(strings.Replace(fmt.Sprintf("%v", this.Headers), "Headers", "Headers", 1), `&`, ``, 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringMultipleHeaderProposalProof(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *MultipleHeaderProposalProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMultipleHeaderProposalProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultipleHeaderProposalProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultipleHeaderProposalProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderProposalProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= ThreatLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMultipleHeaderProposalProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMultipleHeaderProposalProof
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMultipleHeaderProposalProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Headers.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMultipleHeaderProposalProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMultipleHeaderProposalProof
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMultipleHeaderProposalProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMultipleHeaderProposalProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMultipleHeaderProposalProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultipleHeaderProposalProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMultipleHeaderProposalProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMultipleHeaderProposalProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMultipleHeaderProposalProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMultipleHeaderProposalProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMultipleHeaderProposalProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMultipleHeaderProposalProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMultipleHeaderProposalProof = fmt.Errorf("proto: unexpected end of group")
)
