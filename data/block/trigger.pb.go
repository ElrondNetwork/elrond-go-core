// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: trigger.proto

package block

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TriggerRegistry struct {
	IsEpochStart                bool    `protobuf:"varint,1,opt,name=IsEpochStart,proto3" json:"IsEpochStart,omitempty"`
	NewEpochHeaderReceived      bool    `protobuf:"varint,2,opt,name=NewEpochHeaderReceived,proto3" json:"NewEpochHeaderReceived,omitempty"`
	Epoch                       uint32  `protobuf:"varint,3,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	MetaEpoch                   uint32  `protobuf:"varint,4,opt,name=MetaEpoch,proto3" json:"MetaEpoch,omitempty"`
	CurrentRoundIndex           int64   `protobuf:"varint,5,opt,name=CurrentRoundIndex,proto3" json:"CurrentRoundIndex,omitempty"`
	EpochStartRound             uint64  `protobuf:"varint,6,opt,name=EpochStartRound,proto3" json:"EpochStartRound,omitempty"`
	EpochFinalityAttestingRound uint64  `protobuf:"varint,7,opt,name=EpochFinalityAttestingRound,proto3" json:"EpochFinalityAttestingRound,omitempty"`
	EpochMetaBlockHash          []byte  `protobuf:"bytes,8,opt,name=EpochMetaBlockHash,proto3" json:"EpochMetaBlockHash,omitempty"`
	EpochStartShardHeader       *Header `protobuf:"bytes,9,opt,name=EpochStartShardHeader,proto3" json:"EpochStartShardHeader,omitempty"`
}

func (m *TriggerRegistry) Reset()      { *m = TriggerRegistry{} }
func (*TriggerRegistry) ProtoMessage() {}
func (*TriggerRegistry) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c31e6d8b4368946, []int{0}
}
func (m *TriggerRegistry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerRegistry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TriggerRegistry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerRegistry.Merge(m, src)
}
func (m *TriggerRegistry) XXX_Size() int {
	return m.Size()
}
func (m *TriggerRegistry) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerRegistry.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerRegistry proto.InternalMessageInfo

func (m *TriggerRegistry) GetIsEpochStart() bool {
	if m != nil {
		return m.IsEpochStart
	}
	return false
}

func (m *TriggerRegistry) GetNewEpochHeaderReceived() bool {
	if m != nil {
		return m.NewEpochHeaderReceived
	}
	return false
}

func (m *TriggerRegistry) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *TriggerRegistry) GetMetaEpoch() uint32 {
	if m != nil {
		return m.MetaEpoch
	}
	return 0
}

func (m *TriggerRegistry) GetCurrentRoundIndex() int64 {
	if m != nil {
		return m.CurrentRoundIndex
	}
	return 0
}

func (m *TriggerRegistry) GetEpochStartRound() uint64 {
	if m != nil {
		return m.EpochStartRound
	}
	return 0
}

func (m *TriggerRegistry) GetEpochFinalityAttestingRound() uint64 {
	if m != nil {
		return m.EpochFinalityAttestingRound
	}
	return 0
}

func (m *TriggerRegistry) GetEpochMetaBlockHash() []byte {
	if m != nil {
		return m.EpochMetaBlockHash
	}
	return nil
}

func (m *TriggerRegistry) GetEpochStartShardHeader() *Header {
	if m != nil {
		return m.EpochStartShardHeader
	}
	return nil
}

type TriggerRegistryV2 struct {
	EpochStartShardHeader       *HeaderV2 `protobuf:"bytes,1,opt,name=EpochStartShardHeader,proto3" json:"EpochStartShardHeader,omitempty"`
	IsEpochStart                bool      `protobuf:"varint,2,opt,name=IsEpochStart,proto3" json:"IsEpochStart,omitempty"`
	NewEpochHeaderReceived      bool      `protobuf:"varint,3,opt,name=NewEpochHeaderReceived,proto3" json:"NewEpochHeaderReceived,omitempty"`
	Epoch                       uint32    `protobuf:"varint,4,opt,name=Epoch,proto3" json:"Epoch,omitempty"`
	MetaEpoch                   uint32    `protobuf:"varint,5,opt,name=MetaEpoch,proto3" json:"MetaEpoch,omitempty"`
	CurrentRoundIndex           int64     `protobuf:"varint,6,opt,name=CurrentRoundIndex,proto3" json:"CurrentRoundIndex,omitempty"`
	EpochStartRound             uint64    `protobuf:"varint,7,opt,name=EpochStartRound,proto3" json:"EpochStartRound,omitempty"`
	EpochFinalityAttestingRound uint64    `protobuf:"varint,8,opt,name=EpochFinalityAttestingRound,proto3" json:"EpochFinalityAttestingRound,omitempty"`
	EpochMetaBlockHash          []byte    `protobuf:"bytes,9,opt,name=EpochMetaBlockHash,proto3" json:"EpochMetaBlockHash,omitempty"`
}

func (m *TriggerRegistryV2) Reset()      { *m = TriggerRegistryV2{} }
func (*TriggerRegistryV2) ProtoMessage() {}
func (*TriggerRegistryV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c31e6d8b4368946, []int{1}
}
func (m *TriggerRegistryV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TriggerRegistryV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TriggerRegistryV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TriggerRegistryV2.Merge(m, src)
}
func (m *TriggerRegistryV2) XXX_Size() int {
	return m.Size()
}
func (m *TriggerRegistryV2) XXX_DiscardUnknown() {
	xxx_messageInfo_TriggerRegistryV2.DiscardUnknown(m)
}

var xxx_messageInfo_TriggerRegistryV2 proto.InternalMessageInfo

func (m *TriggerRegistryV2) GetEpochStartShardHeader() *HeaderV2 {
	if m != nil {
		return m.EpochStartShardHeader
	}
	return nil
}

func (m *TriggerRegistryV2) GetIsEpochStart() bool {
	if m != nil {
		return m.IsEpochStart
	}
	return false
}

func (m *TriggerRegistryV2) GetNewEpochHeaderReceived() bool {
	if m != nil {
		return m.NewEpochHeaderReceived
	}
	return false
}

func (m *TriggerRegistryV2) GetEpoch() uint32 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

func (m *TriggerRegistryV2) GetMetaEpoch() uint32 {
	if m != nil {
		return m.MetaEpoch
	}
	return 0
}

func (m *TriggerRegistryV2) GetCurrentRoundIndex() int64 {
	if m != nil {
		return m.CurrentRoundIndex
	}
	return 0
}

func (m *TriggerRegistryV2) GetEpochStartRound() uint64 {
	if m != nil {
		return m.EpochStartRound
	}
	return 0
}

func (m *TriggerRegistryV2) GetEpochFinalityAttestingRound() uint64 {
	if m != nil {
		return m.EpochFinalityAttestingRound
	}
	return 0
}

func (m *TriggerRegistryV2) GetEpochMetaBlockHash() []byte {
	if m != nil {
		return m.EpochMetaBlockHash
	}
	return nil
}

func init() {
	proto.RegisterType((*TriggerRegistry)(nil), "proto.TriggerRegistry")
	proto.RegisterType((*TriggerRegistryV2)(nil), "proto.TriggerRegistryV2")
}

func init() { proto.RegisterFile("trigger.proto", fileDescriptor_8c31e6d8b4368946) }

var fileDescriptor_8c31e6d8b4368946 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xbf, 0x6e, 0xd4, 0x40,
	0x10, 0xc6, 0x3d, 0xf1, 0xf9, 0x72, 0xb7, 0x89, 0x75, 0xca, 0x0a, 0x90, 0x15, 0xd0, 0xca, 0xba,
	0xca, 0x05, 0x38, 0x92, 0x91, 0x68, 0x81, 0x44, 0x41, 0x49, 0x01, 0x85, 0x83, 0xae, 0xa0, 0xf3,
	0x9f, 0xc5, 0xb6, 0x08, 0xde, 0x68, 0xbd, 0x06, 0xd2, 0xf1, 0x08, 0x3c, 0x06, 0x25, 0x05, 0x0f,
	0x41, 0x79, 0xe5, 0x95, 0xdc, 0x5e, 0x43, 0x99, 0x47, 0x40, 0x37, 0x1b, 0xe9, 0x94, 0x3f, 0x8e,
	0x92, 0x54, 0xf6, 0xf7, 0x7d, 0x33, 0xe3, 0xd1, 0xfc, 0x64, 0xe2, 0x2a, 0x59, 0x15, 0x05, 0x97,
	0xe1, 0x89, 0x14, 0x4a, 0x50, 0x07, 0x1f, 0xdb, 0xcf, 0x8a, 0x4a, 0x95, 0x6d, 0x1a, 0x66, 0xe2,
	0xf3, 0x4e, 0x21, 0x0a, 0xb1, 0x83, 0x76, 0xda, 0x7e, 0x44, 0x85, 0x02, 0xdf, 0x4c, 0xd7, 0xf6,
	0x46, 0x7a, 0x2c, 0xb2, 0x4f, 0xe7, 0xc2, 0x45, 0x31, 0x89, 0x8c, 0x1c, 0xff, 0xb2, 0xc9, 0xe8,
	0xbd, 0xf9, 0x46, 0xcc, 0x8b, 0xaa, 0x51, 0xf2, 0x94, 0x8e, 0xc9, 0xe6, 0x61, 0xb3, 0x7f, 0x22,
	0xb2, 0xf2, 0x48, 0x25, 0x52, 0x79, 0xe0, 0x43, 0x30, 0x88, 0x2f, 0x78, 0xf4, 0x05, 0x79, 0xf4,
	0x8e, 0x7f, 0x45, 0xe3, 0x80, 0x27, 0xf9, 0xb2, 0x3b, 0xe3, 0xd5, 0x17, 0x9e, 0x7b, 0x6b, 0x58,
	0xdd, 0x91, 0xd2, 0x07, 0xc4, 0x41, 0xdb, 0xb3, 0x7d, 0x08, 0xdc, 0xd8, 0x08, 0xfa, 0x84, 0x0c,
	0xdf, 0x72, 0x95, 0x98, 0xa4, 0x87, 0xc9, 0xca, 0xa0, 0x4f, 0xc9, 0xd6, 0x5e, 0x2b, 0x25, 0xaf,
	0x55, 0x2c, 0xda, 0x3a, 0x3f, 0xac, 0x73, 0xfe, 0xcd, 0x73, 0x7c, 0x08, 0xec, 0xf8, 0x6a, 0x40,
	0x03, 0x32, 0x5a, 0xed, 0x89, 0xbe, 0xd7, 0xf7, 0x21, 0xe8, 0xc5, 0x97, 0x6d, 0xfa, 0x8a, 0x3c,
	0x46, 0xeb, 0x4d, 0x55, 0x27, 0xc7, 0x95, 0x3a, 0x7d, 0xad, 0x14, 0x6f, 0x54, 0x55, 0x17, 0xa6,
	0x6b, 0x1d, 0xbb, 0x6e, 0x2a, 0xa1, 0x21, 0xa1, 0x18, 0x2f, 0x77, 0xdd, 0x5d, 0xde, 0xf5, 0x20,
	0x69, 0x4a, 0x6f, 0xe0, 0x43, 0xb0, 0x19, 0x5f, 0x93, 0xd0, 0x3d, 0xf2, 0x70, 0xb5, 0xc4, 0x51,
	0x99, 0xc8, 0xdc, 0x9c, 0xc7, 0x1b, 0xfa, 0x10, 0x6c, 0x44, 0xae, 0x81, 0x12, 0x9e, 0xdf, 0xec,
	0xfa, 0xda, 0xf1, 0x6f, 0x9b, 0x6c, 0x5d, 0x42, 0x36, 0x89, 0xe8, 0x7e, 0xd7, 0x68, 0xc0, 0xd1,
	0xa3, 0x0b, 0xa3, 0x27, 0x51, 0xc7, 0xf0, 0x2b, 0xec, 0xd7, 0xee, 0xc4, 0xde, 0xbe, 0x1d, 0xfb,
	0x5e, 0x27, 0x7b, 0xe7, 0x56, 0xec, 0xfb, 0x77, 0x60, 0xbf, 0x7e, 0x2f, 0xf6, 0x83, 0xfb, 0xb2,
	0x1f, 0x76, 0xb1, 0xdf, 0x7d, 0x39, 0x9d, 0x33, 0x6b, 0x36, 0x67, 0xd6, 0xd9, 0x9c, 0xc1, 0x77,
	0xcd, 0xe0, 0xa7, 0x66, 0xf0, 0x47, 0x33, 0x98, 0x6a, 0x06, 0x33, 0xcd, 0xe0, 0xaf, 0x66, 0xf0,
	0x4f, 0x33, 0xeb, 0x4c, 0x33, 0xf8, 0xb1, 0x60, 0xd6, 0x74, 0xc1, 0xac, 0xd9, 0x82, 0x59, 0x1f,
	0x1c, 0xfc, 0x65, 0xd3, 0x3e, 0x12, 0x7c, 0xfe, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf7, 0x6d, 0x96,
	0x7e, 0x14, 0x04, 0x00, 0x00,
}

func (this *TriggerRegistry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TriggerRegistry)
	if !ok {
		that2, ok := that.(TriggerRegistry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IsEpochStart != that1.IsEpochStart {
		return false
	}
	if this.NewEpochHeaderReceived != that1.NewEpochHeaderReceived {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.MetaEpoch != that1.MetaEpoch {
		return false
	}
	if this.CurrentRoundIndex != that1.CurrentRoundIndex {
		return false
	}
	if this.EpochStartRound != that1.EpochStartRound {
		return false
	}
	if this.EpochFinalityAttestingRound != that1.EpochFinalityAttestingRound {
		return false
	}
	if !bytes.Equal(this.EpochMetaBlockHash, that1.EpochMetaBlockHash) {
		return false
	}
	if !this.EpochStartShardHeader.Equal(that1.EpochStartShardHeader) {
		return false
	}
	return true
}
func (this *TriggerRegistryV2) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TriggerRegistryV2)
	if !ok {
		that2, ok := that.(TriggerRegistryV2)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.EpochStartShardHeader.Equal(that1.EpochStartShardHeader) {
		return false
	}
	if this.IsEpochStart != that1.IsEpochStart {
		return false
	}
	if this.NewEpochHeaderReceived != that1.NewEpochHeaderReceived {
		return false
	}
	if this.Epoch != that1.Epoch {
		return false
	}
	if this.MetaEpoch != that1.MetaEpoch {
		return false
	}
	if this.CurrentRoundIndex != that1.CurrentRoundIndex {
		return false
	}
	if this.EpochStartRound != that1.EpochStartRound {
		return false
	}
	if this.EpochFinalityAttestingRound != that1.EpochFinalityAttestingRound {
		return false
	}
	if !bytes.Equal(this.EpochMetaBlockHash, that1.EpochMetaBlockHash) {
		return false
	}
	return true
}
func (this *TriggerRegistry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&block.TriggerRegistry{")
	s = append(s, "IsEpochStart: "+fmt.Sprintf("%#v", this.IsEpochStart)+",\n")
	s = append(s, "NewEpochHeaderReceived: "+fmt.Sprintf("%#v", this.NewEpochHeaderReceived)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "MetaEpoch: "+fmt.Sprintf("%#v", this.MetaEpoch)+",\n")
	s = append(s, "CurrentRoundIndex: "+fmt.Sprintf("%#v", this.CurrentRoundIndex)+",\n")
	s = append(s, "EpochStartRound: "+fmt.Sprintf("%#v", this.EpochStartRound)+",\n")
	s = append(s, "EpochFinalityAttestingRound: "+fmt.Sprintf("%#v", this.EpochFinalityAttestingRound)+",\n")
	s = append(s, "EpochMetaBlockHash: "+fmt.Sprintf("%#v", this.EpochMetaBlockHash)+",\n")
	if this.EpochStartShardHeader != nil {
		s = append(s, "EpochStartShardHeader: "+fmt.Sprintf("%#v", this.EpochStartShardHeader)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TriggerRegistryV2) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&block.TriggerRegistryV2{")
	if this.EpochStartShardHeader != nil {
		s = append(s, "EpochStartShardHeader: "+fmt.Sprintf("%#v", this.EpochStartShardHeader)+",\n")
	}
	s = append(s, "IsEpochStart: "+fmt.Sprintf("%#v", this.IsEpochStart)+",\n")
	s = append(s, "NewEpochHeaderReceived: "+fmt.Sprintf("%#v", this.NewEpochHeaderReceived)+",\n")
	s = append(s, "Epoch: "+fmt.Sprintf("%#v", this.Epoch)+",\n")
	s = append(s, "MetaEpoch: "+fmt.Sprintf("%#v", this.MetaEpoch)+",\n")
	s = append(s, "CurrentRoundIndex: "+fmt.Sprintf("%#v", this.CurrentRoundIndex)+",\n")
	s = append(s, "EpochStartRound: "+fmt.Sprintf("%#v", this.EpochStartRound)+",\n")
	s = append(s, "EpochFinalityAttestingRound: "+fmt.Sprintf("%#v", this.EpochFinalityAttestingRound)+",\n")
	s = append(s, "EpochMetaBlockHash: "+fmt.Sprintf("%#v", this.EpochMetaBlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTrigger(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *TriggerRegistry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerRegistry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerRegistry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EpochStartShardHeader != nil {
		{
			size, err := m.EpochStartShardHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrigger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if len(m.EpochMetaBlockHash) > 0 {
		i -= len(m.EpochMetaBlockHash)
		copy(dAtA[i:], m.EpochMetaBlockHash)
		i = encodeVarintTrigger(dAtA, i, uint64(len(m.EpochMetaBlockHash)))
		i--
		dAtA[i] = 0x42
	}
	if m.EpochFinalityAttestingRound != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.EpochFinalityAttestingRound))
		i--
		dAtA[i] = 0x38
	}
	if m.EpochStartRound != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.EpochStartRound))
		i--
		dAtA[i] = 0x30
	}
	if m.CurrentRoundIndex != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.CurrentRoundIndex))
		i--
		dAtA[i] = 0x28
	}
	if m.MetaEpoch != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.MetaEpoch))
		i--
		dAtA[i] = 0x20
	}
	if m.Epoch != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x18
	}
	if m.NewEpochHeaderReceived {
		i--
		if m.NewEpochHeaderReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.IsEpochStart {
		i--
		if m.IsEpochStart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TriggerRegistryV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TriggerRegistryV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TriggerRegistryV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EpochMetaBlockHash) > 0 {
		i -= len(m.EpochMetaBlockHash)
		copy(dAtA[i:], m.EpochMetaBlockHash)
		i = encodeVarintTrigger(dAtA, i, uint64(len(m.EpochMetaBlockHash)))
		i--
		dAtA[i] = 0x4a
	}
	if m.EpochFinalityAttestingRound != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.EpochFinalityAttestingRound))
		i--
		dAtA[i] = 0x40
	}
	if m.EpochStartRound != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.EpochStartRound))
		i--
		dAtA[i] = 0x38
	}
	if m.CurrentRoundIndex != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.CurrentRoundIndex))
		i--
		dAtA[i] = 0x30
	}
	if m.MetaEpoch != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.MetaEpoch))
		i--
		dAtA[i] = 0x28
	}
	if m.Epoch != 0 {
		i = encodeVarintTrigger(dAtA, i, uint64(m.Epoch))
		i--
		dAtA[i] = 0x20
	}
	if m.NewEpochHeaderReceived {
		i--
		if m.NewEpochHeaderReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.IsEpochStart {
		i--
		if m.IsEpochStart {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EpochStartShardHeader != nil {
		{
			size, err := m.EpochStartShardHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrigger(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrigger(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrigger(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TriggerRegistry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsEpochStart {
		n += 2
	}
	if m.NewEpochHeaderReceived {
		n += 2
	}
	if m.Epoch != 0 {
		n += 1 + sovTrigger(uint64(m.Epoch))
	}
	if m.MetaEpoch != 0 {
		n += 1 + sovTrigger(uint64(m.MetaEpoch))
	}
	if m.CurrentRoundIndex != 0 {
		n += 1 + sovTrigger(uint64(m.CurrentRoundIndex))
	}
	if m.EpochStartRound != 0 {
		n += 1 + sovTrigger(uint64(m.EpochStartRound))
	}
	if m.EpochFinalityAttestingRound != 0 {
		n += 1 + sovTrigger(uint64(m.EpochFinalityAttestingRound))
	}
	l = len(m.EpochMetaBlockHash)
	if l > 0 {
		n += 1 + l + sovTrigger(uint64(l))
	}
	if m.EpochStartShardHeader != nil {
		l = m.EpochStartShardHeader.Size()
		n += 1 + l + sovTrigger(uint64(l))
	}
	return n
}

func (m *TriggerRegistryV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochStartShardHeader != nil {
		l = m.EpochStartShardHeader.Size()
		n += 1 + l + sovTrigger(uint64(l))
	}
	if m.IsEpochStart {
		n += 2
	}
	if m.NewEpochHeaderReceived {
		n += 2
	}
	if m.Epoch != 0 {
		n += 1 + sovTrigger(uint64(m.Epoch))
	}
	if m.MetaEpoch != 0 {
		n += 1 + sovTrigger(uint64(m.MetaEpoch))
	}
	if m.CurrentRoundIndex != 0 {
		n += 1 + sovTrigger(uint64(m.CurrentRoundIndex))
	}
	if m.EpochStartRound != 0 {
		n += 1 + sovTrigger(uint64(m.EpochStartRound))
	}
	if m.EpochFinalityAttestingRound != 0 {
		n += 1 + sovTrigger(uint64(m.EpochFinalityAttestingRound))
	}
	l = len(m.EpochMetaBlockHash)
	if l > 0 {
		n += 1 + l + sovTrigger(uint64(l))
	}
	return n
}

func sovTrigger(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrigger(x uint64) (n int) {
	return sovTrigger(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TriggerRegistry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggerRegistry{`,
		`IsEpochStart:` + fmt.Sprintf("%v", this.IsEpochStart) + `,`,
		`NewEpochHeaderReceived:` + fmt.Sprintf("%v", this.NewEpochHeaderReceived) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`MetaEpoch:` + fmt.Sprintf("%v", this.MetaEpoch) + `,`,
		`CurrentRoundIndex:` + fmt.Sprintf("%v", this.CurrentRoundIndex) + `,`,
		`EpochStartRound:` + fmt.Sprintf("%v", this.EpochStartRound) + `,`,
		`EpochFinalityAttestingRound:` + fmt.Sprintf("%v", this.EpochFinalityAttestingRound) + `,`,
		`EpochMetaBlockHash:` + fmt.Sprintf("%v", this.EpochMetaBlockHash) + `,`,
		`EpochStartShardHeader:` + strings.Replace(fmt.Sprintf("%v", this.EpochStartShardHeader), "Header", "Header", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TriggerRegistryV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TriggerRegistryV2{`,
		`EpochStartShardHeader:` + strings.Replace(fmt.Sprintf("%v", this.EpochStartShardHeader), "HeaderV2", "HeaderV2", 1) + `,`,
		`IsEpochStart:` + fmt.Sprintf("%v", this.IsEpochStart) + `,`,
		`NewEpochHeaderReceived:` + fmt.Sprintf("%v", this.NewEpochHeaderReceived) + `,`,
		`Epoch:` + fmt.Sprintf("%v", this.Epoch) + `,`,
		`MetaEpoch:` + fmt.Sprintf("%v", this.MetaEpoch) + `,`,
		`CurrentRoundIndex:` + fmt.Sprintf("%v", this.CurrentRoundIndex) + `,`,
		`EpochStartRound:` + fmt.Sprintf("%v", this.EpochStartRound) + `,`,
		`EpochFinalityAttestingRound:` + fmt.Sprintf("%v", this.EpochFinalityAttestingRound) + `,`,
		`EpochMetaBlockHash:` + fmt.Sprintf("%v", this.EpochMetaBlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringTrigger(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TriggerRegistry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrigger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerRegistry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerRegistry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEpochStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEpochStart = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochHeaderReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewEpochHeaderReceived = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaEpoch", wireType)
			}
			m.MetaEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundIndex", wireType)
			}
			m.CurrentRoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRoundIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartRound", wireType)
			}
			m.EpochStartRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochStartRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochFinalityAttestingRound", wireType)
			}
			m.EpochFinalityAttestingRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochFinalityAttestingRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMetaBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrigger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrigger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochMetaBlockHash = append(m.EpochMetaBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EpochMetaBlockHash == nil {
				m.EpochMetaBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartShardHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrigger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrigger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochStartShardHeader == nil {
				m.EpochStartShardHeader = &Header{}
			}
			if err := m.EpochStartShardHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrigger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrigger
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrigger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TriggerRegistryV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrigger
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TriggerRegistryV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TriggerRegistryV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartShardHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrigger
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrigger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EpochStartShardHeader == nil {
				m.EpochStartShardHeader = &HeaderV2{}
			}
			if err := m.EpochStartShardHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEpochStart", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEpochStart = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewEpochHeaderReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NewEpochHeaderReceived = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			m.Epoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetaEpoch", wireType)
			}
			m.MetaEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MetaEpoch |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoundIndex", wireType)
			}
			m.CurrentRoundIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRoundIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochStartRound", wireType)
			}
			m.EpochStartRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochStartRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochFinalityAttestingRound", wireType)
			}
			m.EpochFinalityAttestingRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochFinalityAttestingRound |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochMetaBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTrigger
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTrigger
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EpochMetaBlockHash = append(m.EpochMetaBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.EpochMetaBlockHash == nil {
				m.EpochMetaBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrigger(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrigger
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrigger
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrigger(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrigger
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrigger
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrigger
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrigger
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrigger
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrigger        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrigger          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrigger = fmt.Errorf("proto: unexpected end of group")
)
